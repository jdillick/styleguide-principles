h1. CSS Specificity Rules:

Before we can get into the nitty-gritty of the least specificity principle, you must first understand how the browser handles specificity.

Selector types have different precedence, and all browsers use these differences to decide which style “wins” if any two selectors are setting the same property.

Below we have an example of the problem the browser is solving:

*What is the background color of the below markup?*

*HTML*

{code:html/xml}
<div class="person">
    I'm a person too.
</div>
{code}

*CSS*

{code:css}
div.person {
    background-color: red;
}

.person {
    background-color: blue;
}

div {
    background-color: grey;
}
{code}

The CSS specification was really smart in deciding how this system would work. By placing a completely different order of denomination upon different html markup characteristics that are more or less specific in the DOM, you can create a style system that naturally target the precise level of generic / specific that you desire.

It is useful to understand the math that goes into this comparison.

h2. Element Selectors

Elements (e.g. {{&lt;p&gt;}}, {{&lt;a&gt;}}, {{&lt;span&gt;}}, {{&lt;h1&gt;}}) and pseudo-elements (e.g. {{:before}}, {{:after}}) by themselves are the generic building blocks
of markup, and their CSS selectors are the least specific. Each of these can be thought to have a specificity worth 1 each, in the least significant way.

*Count each element in the following selectors and assign 1 to each.*

{code:css}
/* 1 + 1 + 1 = 3 */
div span a {
    background-color: red;
}

/* 1 + 1 = 2 */
span a {
    background-color: blue;
}
{code}

In the example above, {{div span a}} selector wins, because it is more specific.

h2. Class/Attribute Selectors

Classes and attributes selectors are a way of creating some variation in your elements, and therefore are more specific in the CSS spec. Each of these can be thought to have a specificity worth 1 each, one more level of significance above elements. _:not() is not counted_

*Count each class in the following selectors and assign 1 to each.*

{code:css}
/* 1 + 1 + 1 = 3 */
.class1 .class2 .class3 {
    background-color: red;
}

/* 1 + 1 = 2 */
.class2 .class3 {
    background-color: blue;
}

/* 1 */
:not(.class2) {
  background: red;
}
{code}

In the example above, {{.class1 .class2 .class3}} selector wins, because it is more specific.

When class/attribute selectors are mixed, you count them separately, and
concatenate the class/attribute count in front of the element selector. The
biggest combined number wins.

*Count each class and element separately in the following selectors.*

{code:css}
/*
    classes 3
    elements: 3
    total specificity: 3,3  
*/
div.class1 span.class2 a.class3 {
    background-color: red;
}

/*
    classes 2
    elements: 6
    total specificity: 2,6  
*/
div span.class2 a.class3 div ul li {
    background-color: blue;
}
{code}

Notice that the {{div.class1 span.class2 a.class3}} selector wins, even though
there are lots of elements, the classes are always more specific.

h2. Id Selectors

Id selectors in HTML can only be used once per page, and as *identifiers* they are more specific in the CSS spec than classes/attributes, and elements both. Each of these can be thought to have a specificity worth 1 each, one more level of significance above classes.

When used with class/attribute and element selectors, you concatenate
the id count in front of the class/attribute count, which is in turn
concatenated in front of elements.

*Count each id, class, and element separately in the following selectors.*

{code:css}
/*
  id: 1
  classes 3
  elements: 3
  total specificity: 1,3,3  
*/
#headerSection div.class1 span.class2 a.class3 {
    background-color: red;
}

/*
  id: 1
  classes 5
  elements: 3
  total specificity: 1,5,3  
*/
.headerSection div.class1 ul#myList span.class2 a:hover.class3 {
    background-color: blue;
}

/*
  id: 2
  classes 0
  elements: 0
  total specificity: 2,0,0  
*/
#headerSection #myList {
  background-color: green;
}
{code}

Note that the {{#headerSection #myList}} select wins, even though it is
much shorter, because ids are very specific.

h2. Inline style attribute

Styles that appear inline in html have a higher specificity even than Id
selectors, and are your first trump card. No matter how many Ids you select for
in you CSS, inline styles will override them.

*This very specific style will not apply*

{code:css}
/*
  inline: 0
  id: 3
  classes: 0
  elements: 0
  total specificity: 0,3,0,0
 */
#main #heroRegion #myDiv {
  background-color: red;
}
{code}

{code:html/xml}
<!--
  inline: 1
  id: 0
  classes: 0
  elements: 0
  total specificity: 1,0,0,0
-->
<main id="main">
  <section id="heroRegion">
    <div id="myDiv" style="background-color: green;">I'm green, yo.</div>
  </section>
</main>
{code}

It will indeed be green, because an inline style is more specific than your CSS
selectors in general.

h2. !important

Adding a !important to a property is your last resort to override an inline-style.

*This very specific style will apply, but only because of !important*

{code:css}
/*
  id: 3
  classes: 0
  elements: 0
  total specificity: 300
 */
#main #heroRegion #myDiv {
  background-color: red !important; /* trump specificity for this property */
}
{code}

{code:html/xml}
<!--
  inline: 1
  id: 0
  classes: 0
  elements: 0
  total specificity: 1000
-->
<main id="main">
  <section id="heroRegion">
    <div id="myDiv" style="background-color: green;">I'm red, yo. :-(</div>
  </section>
</main>
{code}

Even though the inline style wins the specificity, for the background-color
property, the !important wins.

*Lots of !important properties in your CSS is a good sign that your overusing
inline styles, and/or your CSS is overly specific in general.*

h2. The CSS Spec

See [https://www.w3.org/TR/selectors/#specificity] for the
complete rules regarding specification.

